#!/bin/bash
# Gathers information about system state and creates an lzop
# compressed rich core

# This file is part of sp-rich-core
#
# Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
#
# Contact: Eero Tamminen <eero.tamminen@nokia.com>
# Authors: Riku Halonen <riku.halonen@nokia.com>, Sami Lahtinen <ext-sami.t.lahtinen@nokia.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# version 2 as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
# 02110-1301 USA

set +o posix

#
# Constant variables
#

SW_VERSION_FILE=/etc/os-release
CORE_LOCATION=/var/cache/core-dumps
CORE_SIZE_LIMIT=1000000		# kB
CORE_REDUCE_THRESHOLD=10000	# kB
WAKE_LOCK_TIMEOUT=120 # s

#
# Helper functions
#

_obtain_configuration()
{
  # default fallback values, overruled by configuration file if one exists

  system_settings=/usr/share/crash-reporter-settings
  user_settings=/home/nemo/.config/crash-reporter-settings

  INCLUDE_CORE=true
  REDUCE_CORE=true
  INCLUDE_SYSLOG=true
  INCLUDE_PKGLIST=true
  INCLUDE_STACK_TRACE=false
  DOWNLOAD_DEBUGINFO=false
  KEEP_UNSTRIPPED_CORE=false

  DEFAULT_CORE_NAME="unknown"

  if [ -e $system_settings/crash-reporter-privacy.conf ]; then
    . $system_settings/crash-reporter-privacy.conf 2>/dev/null
  fi

  if [ -e $user_settings/crash-reporter-privacy.conf ]; then
    . $user_settings/crash-reporter-privacy.conf 2>/dev/null
  fi
}

_parse_arguments()
{
  while [ $# -ge 1 ]; do
    case $1 in 
      "--no-section-header")
      NO_SECTION_HEADER=true
      ;;
      "--default-name")
			shift
      DEFAULT_CORE_NAME="$1"
      ;;
      --pid=*)
      core_pid=${1#--pid=}     
      ;;
      --signal=*)
      core_sig=${1#--signal=}
      ;;
      --name=*)
      core_name=${1#--name=}
      ;;
    esac
    shift
  done

  # Default values for unset arguments.
  core_pid=${core_pid:-0}

  if [ -z "${core_sig}" ]; then
    if [ "${core_name}" == "Quickie" ]; then
      # Coreless reports requested from Quick Feedback tool should have a random
      # number in place of a signal identifier in its filename.
      core_sig=$RANDOM
    else
      core_sig=0
    fi
  fi
}

_print_header()
{
    printf '\n[---rich-core: %s---]\n' "$@"
}

_print_file_with_header()
{
  if [ -f $1 ]; then
    _print_header $1
    cat $1
  fi
}

_print_command_with_header()
{
  _cmd=$1
  shift
  if [ -x ${_cmd} ]; then
    _print_header ${_cmd##*/}
    { ${_cmd} $@ 2>&1; }
  fi
}

_free_space()
{
  # get df for the directory, skip the first line (column headers),
  # and then print the third last column "Available"
  df -Pk $1 | awk 'NR == 2 { print $4 }'
}

_check_core_location()
{
  # Check if location exists and has enough space to write a rich core.
  if [ -d "$CORE_LOCATION" ]; then
    freespace=`_free_space "$CORE_LOCATION"`
    [ -n "$freespace" -a "$freespace" -ge 500000 ]
    return
  fi

  return 1
}

#
# Information collection functions
#

_section_kernel_parameters()
{
  _print_header kernel_parameters
  cat /proc/cmdline
}

_section_pstree()
{
  _print_command_with_header /usr/bin/pstree -Uup
}

_section_date()
{
  _print_command_with_header /bin/date
}

_section_proc_fd()
{
  _print_header fd
  ls -l /proc/${core_pid}/fd/
}

_section_proc_smaps()
{
  _print_file_with_header /proc/${core_pid}/smaps
}

_section_software_version()
{
  _print_header software_version
  sed -n 's/PRETTY_NAME=\"\(.*\)\"/\1/p' "${SW_VERSION_FILE}"
}

_section_ifconfig()
{
  _print_command_with_header /sbin/ifconfig -a
}

_section_df()
{
  _print_command_with_header /bin/df -x fuse.statefs
}

_section_ls_proc()
{
  _print_header ls_proc
  ls -l /proc/${core_pid}/
}

_section_cmdline()
{
  if [ -f /proc/${core_pid}/cmdline ]; then
    _print_header /proc/${core_pid}/cmdline
    # replace null chars in cmdline with space
    tr '\0' ' ' < /proc/${core_pid}/cmdline
  fi
}

_section_exe()
{
  _print_header exe
  echo ${core_exe}
}

_section_slabinfo()
{
  _print_file_with_header /proc/slabinfo
}

_section_proc2csv()
{
  _print_command_with_header /usr/bin/proc2csv
}

_section_ps()
{
  _print_command_with_header /bin/ps aux
}

_section_testcase_uuid()
{
  _print_header testcase_uuid
  echo ${core_tc_uuid}
}

_section_user_message()
{
  # User feedback message created by quick-feedback application.
  # Doesn't have to be present.
  local quickie_file="${CORE_LOCATION}/quickie-${core_pid}"

  if [ -f "${quickie_file}" ]; then
    _print_header user_message
    cat "${quickie_file}"
    rm -f "${quickie_file}"
  fi
}

_pkcon_query_installed()
{
  _run_with_timeout 30 pkcon --plain --noninteractive --filter=installed $@ \
    | awk '/^Installed / {print $2}'
}

_section_packagelist()
{
  _print_header packagelist
  _pkcon_query_installed get-packages
}

_section_repositories()
{
  _print_header repositories
  ssu lr
}

_dump_logs()
{
  for xorglog in /var/log/Xorg.0.log.*.gz; do
    if [ -f "$xorglog" ]; then
      _print_header $xorglog
      zcat $xorglog
    fi
  done

  _print_file_with_header /var/log/Xorg.0.log
  _print_file_with_header /var/log/Xorg.0.log.old

  _print_command_with_header /bin/journalctl -b
  _print_command_with_header /bin/dmesg
  _print_command_with_header /system/bin/logcat -d -b main -b radio

  _print_file_with_header /var/log/syslog
  _print_file_with_header /var/log/syslog.old
  _print_file_with_header /var/log/systemboot.log
  _print_file_with_header /var/systemlog/pmlog/pmlog.log
}

_dump_proc_lastlog()
{
  if [ -d /proc/lastlog ]; then
    for file in /proc/lastlog/*; do
      _print_header proc-lastlog-$(basename $file)
      cat $file
    done
  fi
}

_section_failed_oneshot_scripts()
{
  _print_header failed_oneshot_scripts
  cat "${CORE_LOCATION}/oneshots"
}

_section_rich_core_errors()
{
  if [ "${omit_core}" = "true" ] || [ "$RICH_CORE_ERRORS" != "" ]; then
    _print_header rich-core-errors
  fi

  if [ "${omit_core}" = "true" ]; then
    echo "Core dumping was omitted due to lack of free space on device or core size greater than ${CORE_SIZE_LIMIT} kB."
    echo "Free space on device = ${freespace} kB"
    echo "Approximate size of core = ${coresize_approx} kB"
    echo "VmSize = ${vmsize} kB"
    echo "VmExe  = ${vmexe} kB"
    echo "VmLib  = ${vmlib} kB"
  fi

  echo -e "${RICH_CORE_ERRORS%\\n}"
}

_section_extra_files()
{
  if [ -d /etc/rich-core/ ]; then
    extras=$(find /etc/rich-core/ -type f \( -name default.extras -o -name ${core_name}.extras \) | xargs cat)
    for file in $(for i in ${extras}; do echo $i; done | sort -u)
    do
      _print_file_with_header ${file}
    done
  fi
}

_section_ssu_status()
{
  _print_header ssu-status
  ssu status
}

_section_exe_package()
{
  _print_header exe-package
  _pkcon_query_installed search file ${core_exe}
}

_get_vmsizes()
{
  # get virtual memory size information of process
  set $(awk -F' ' '/VmSize|VmExe|VmLib/ { print $2 }' /proc/$1/status);
  vmsize=$1
  vmexe=$2
  vmlib=$3
}

_check_and_install()
{
  (which $1 >/dev/null) && return 0

  # If a running rpm scriptlet is detected, we don't execute pkcon. Application
  # crashing inside that script may cause a deadlock since packagekitd would be
  # waiting until scriptlet finishes, which would be waiting for failed program
  # to finish dumping core, which would be waiting for pkcon to finish.
  [ $has_suitable_network_connection = "true" ] && \
    ! (ps ax | grep '[/]bin/sh /var/tmp/rpm-tmp.' >/dev/null) && \
    (pkcon --noninteractive install $1 >/dev/null)

  return $?
}

_invoke_gdb()
{
  while read line; do
    local gdb_ex="$gdb_ex -ex '$line'"
  done < <(echo -e "$LIBS_WITHOUT_BUILD_ID")

  local GDB="gdb -nx ${gdb_ex} -ex '$1' --batch ${core_exe} \"${originalcorefilename}\""

  eval $GDB 2>&1
  local GDBSTATUS=$?

  if [ $GDBSTATUS -ne 0 ]; then
    echo "gdb terminated with exit status $GDBSTATUS"
    echo "command was: $GDB"
    return 1
  fi

  return 0
}

_collect_shlibs()
{
  core_maps=/proc/$core_pid/maps
  local maps=$(sed -n 's|^\([[:xdigit:]]\+\)-\([[:xdigit:]]\+\) r-xp [^/]*\(/.*\).*$|\1 \2 \3|p' $core_maps)

  if [ -d "/proc/$core_pid/map_files" ]; then
    has_map_files=true
  fi

  while read startaddr endaddr lib; do
    lib_path=${lib% (deleted)}

    if [ -n "$has_map_files" ]; then
      idsource=$(echo $startaddr | sed 's|^0*||')-$(echo $endaddr | sed 's|^0*||')
      idsource="/proc/$core_pid/map_files/$idsource"
    else
      if [ "$lib_path" != "$lib" ]; then
        DELETED_LIBS="${DELETED_LIBS}$lib_path\n"
        continue
      fi
      idsource=$lib_path
    fi

    SH_LIBS="${SH_LIBS}$startaddr $lib_path $idsource\n"
  done < <(echo "$maps")

  SH_LIBS="${SH_LIBS%\\n}"

  if [ -n "$DELETED_LIBS" ]; then
    _print_header deleted_libs
    echo -e "${DELETED_LIBS%\\n}"
  fi
}

_section_proc_maps()
{
  _collect_shlibs

  _print_header buildids
  while read startaddr lib idsource; do
    build_id=$(readelf -n $idsource \
        | sed -n 's/[[:space:]]*Build ID: \([[:xdigit:]]\+\)$/\1/p');
    if [ -n "$build_id" ]; then
      echo $lib $build_id
      BUILD_IDS="$BUILD_IDS $build_id"
    else
      textaddr=$(readelf --sections $lib \
          | sed -n 's/^[[:space:]]*\[[ 0-9]\+\] \.text[[:space:]]\+[A-Z_]\+[[:space:]]\+[[:xdigit:]]\+ \([[:xdigit:]]\+\) .*$/\1/p')

      offset=$(printf "%X" $((0x$startaddr + 0x$textaddr)))
      lib=$(echo "$lib" | sed 's/^\/system\/lib\///')
      LIBS_WITHOUT_BUILD_ID="${LIBS_WITHOUT_BUILD_ID}add-symbol-file /system/symbols/$lib 0x$offset\n"
    fi
  done < <(echo -e "$SH_LIBS")

  if [ -n "$LIBS_WITHOUT_BUILD_ID" ]; then
    _print_header buildids_missing
    echo -e "${LIBS_WITHOUT_BUILD_ID%\\n}"
  fi
}

_download_debuginfo()
{
  _print_header debuginfo_download
  for buildid in $BUILD_IDS; do
    CMD="zypper --non-interactive install -C debuginfo(build-id)=$buildid"
    echo "-------------------------------------------------------------------"
    echo "\$$CMD"
    echo "-------------------------------------------------------------------"
    $CMD 2>&1
  done
}

_capture_stacktrace()
{
  if _check_and_install gdb; then
    if [ x"$DOWNLOAD_DEBUGINFO" = x"true" ] && (_check_and_install zypper); then

      # Disable packagekitd if it is running before we attempt to download
      # debuginfo packages using zypper.
      local packagekitd_pid=$(pgrep -x packagekitd)
      if [ -n "$packagekitd_pid" ]; then
        kill $packagekitd_pid
      fi

      _download_debuginfo
    fi

    _print_header stacktrace
    _invoke_gdb 'thread apply all bt full'
  fi
}

_reduce_core()
{
  local original_core_size=$(du -b "$originalcorefilename" | awk '{ print $1 }')
  if [ $original_core_size -lt $(($CORE_REDUCE_THRESHOLD * 1000)) ]; then
    _log_msg "Core size ${original_core_size}B below threshold; not reducing."
    cat $originalcorefilename;
    return;
  fi

  core-reducer -i "$originalcorefilename" -o /dev/stdout -e $core_exe
  retval=$?
  if [ $retval != 0 ]; then
    RICH_CORE_ERRORS="${RICH_CORE_ERRORS}core-reducer exited with value $retval, core file of size ${original_core_size}B is likely truncated\n"
  fi
}

_log_msg()
{
  # We run logger on background so that the script doesn't get stuck if system
  # journal is not accessible.
  logger "$1" &
}

_run_with_timeout()
{
  local timeout=$1
  local cmd=$2
  shift 2

  ($cmd $@) &
  local pid=$!

  (sleep $timeout && kill -KILL $pid) 2>/dev/null &
  local watcher=$!

  wait $pid
  pkill -HUP -P $watcher

  if wait $watcher; then
    # $watcher process returns zero exit status if timeout did occur.
    echo "$cmd terminated after $timeout seconds." 
  fi
}

#
# Main program
#

# Don't dump cores when OS is updating.
if [ -e /tmp/os-update-running ]; then
  exit
fi

echo "rich-core-dumper $(($WAKE_LOCK_TIMEOUT * 1000000000))" > /sys/power/wake_lock

export PATH

_obtain_configuration

_parse_arguments $*

_log_msg "rich-core: arguments: $*"

# Clean up any leftover temporary files last modified more than two days ago.
find "$CORE_LOCATION" -maxdepth 1 -mtime +2 -name *.tmp -delete

# If dumping is disabled in settings, don't bother going further. However, the
# setting is overriden if this dump was invoked with PID 0, meaning only logs
# are collected, or the process was killed by SIGQUIT, which means user
# explicitly requested its termination from quick-feedback application.
if [ x"${coredumping}" = x"false" -a ! \( $core_pid -eq 0 -o $core_sig -eq 3 \) ]; then
  cat > /dev/null
  exit
fi

if ! _check_core_location; then
  [ $core_pid -eq 0 ] || cat > /dev/null
  _log_msg "rich-core: no core location or not enough free space - not dumping"
  exit
fi

if [ "$core_name" != "statefs" ]; then
  network_type=$(cat /run/state/namespaces/Internet/NetworkType)
fi

has_suitable_network_connection=false

# Don't download anything when on a network that charges for data.
# Valid NetworkType values are from src/connman/provider_connman.cpp in
# Nemo Mobile's statefs-providers.
if [ x"$network_type" = x"WLAN" -o x"$network_type" = x"ethernet" ]; then
  has_suitable_network_connection=true
fi

# When core reducing and/or stack trace inclusion is enabled, coredump is
# written temporarily on disk. Therefore, space left must be checked.
if [ "${core_pid}" != "0" -a \( "${REDUCE_CORE}" = "true" -o "${INCLUDE_STACK_TRACE}" = "true" \) ]; then
  _get_vmsizes ${core_pid}

  if [ -z "${vmsize}" -o -z "${vmlib}" -o -z "${vmexe}" ]; then
    _log_msg "rich-core: could not get virtual memory information of process - not dumping"
    cat > /dev/null
    exit
  fi

  # calculate approximate size of core file
  coresize_approx=$((${vmsize}-${vmlib}-${vmexe}))

  if [ $((${freespace} - ${coresize_approx})) -lt 50000 ]; then
    # not enough free space for input core file + required extra 50M
    omit_core=true
    _log_msg "rich-core: dumping core might fill up disk - not dumping"
  elif [ ${coresize_approx} -gt ${CORE_SIZE_LIMIT} ]; then
    # approximated size of input core file is greater than the limit
    omit_core=true
    _log_msg "rich-core: approximate of core size is greater than ${CORE_SIZE_LIMIT} kB - not dumping"
  fi

  if [ "${omit_core}" = "true" ]; then
    cat > /dev/null
  fi
fi

# figure out the executable
core_exe=`readlink -f /proc/${core_pid}/exe | sed 's| (deleted)$||'`
core_exe_basename=${core_exe##*/}

# if process is invoker, don't create a core

if [ x"${core_exe_basename}" = x"invoker" ]; then
   cat > /dev/null
   exit
fi

# Only attempt to find the core name if we have a valid PID, try
# alternatives if this is not the case.

if [ "${core_pid}" -gt 0 ]; then
core_tmp=`tr '\0' ' ' < /proc/${core_pid}/cmdline | cut -d' ' -f1`
core_name=${core_tmp##*/}
fi

if [ -z "${core_name}" ]; then
  if [ -n "${core_exe_basename}" ]; then
    core_name="${core_exe_basename}"
  else
    core_name="$DEFAULT_CORE_NAME"
  fi
fi

# Check whether the dump request can be discarded based
# on white/blacklisting rules.

if [ -e /etc/rich-core.include ]; then
    /bin/grep -q "^[[:space:]]*${core_name}[[:space:]]*$" /etc/rich-core.include
    if [ $? -ne 0 ]; then
        # Not in the whitelist; do not dump a core
        cat > /dev/null
        exit
    fi
fi
if [ -e /etc/rich-core.exclude ]; then
    /bin/grep -q "^[[:space:]]*${core_name}[[:space:]]*$" /etc/rich-core.exclude
    if [ $? -eq 0 ]; then
        # Is in the blacklist; do not dump a core
        cat > /dev/null
        exit
    fi
fi

# Check if core reducing is disabled for certain executables based on core_name
if [ -f /etc/rich-core/disable-reducer/${core_name} ]; then
    REDUCE_CORE=false
fi

# If core_exe has zero length, disable core reducing and stack traces
if [ -z ${core_exe} ]; then
    REDUCE_CORE=false
    INCLUDE_STACK_TRACE=false
fi

# If we are not including the core file, reducing it makes no sense
if [ x"$INCLUDE_CORE" != x"true" ]; then
    REDUCE_CORE=false
fi

# If network transfers are paid, don't download anything 
if [ $has_suitable_network_connection = "false" ]; then
    DOWNLOAD_DEBUGINFO=false
fi

# Get hwid
hwid=$(ssu model -s)
if [ -z "${hwid}" ]; then
  hwid="xxx"
fi
 
# Make a naming distinction between oopslogs and rich-cores
if [ -n "${IS_OOPSLOG}" ]; then
  timestamp=$(date +%F-%S)
  rcorebasename=${CORE_LOCATION}/oopslog-${hwid}-${timestamp}
else
  rcorebasename=${CORE_LOCATION}/${core_name}-${hwid}-${core_sig}-${core_pid}
fi

rcorefilename=${rcorebasename}.rcore.lzo

# Create marker file for testrunner-lite
if [ -f "${CORE_LOCATION}/testrunner-lite-testcase" ]; then
  core_tc_uuid=$(cat "${CORE_LOCATION}/testrunner-lite-testcase")
  touch "${rcorefilename}.${core_tc_uuid}"
fi

# Collect process specific information first, only then system
# as process may disappear while this info is collected
(
if [ -z "${IS_OOPSLOG}" ] && [ "${core_pid}" -gt 0 ]; then
  _section_cmdline
  _section_exe
  _section_ls_proc
  _section_proc_fd
  _section_proc_maps
  _section_proc_smaps
fi

_section_ps
_section_kernel_parameters
_section_pstree
_section_date
_section_software_version
_section_df
_section_ifconfig
_section_extra_files

if [ -z "${IS_OOPSLOG}" ]; then
    _section_slabinfo
    _section_proc2csv
fi

if [ -n "${core_tc_uuid}" ]; then
  _section_testcase_uuid
fi

_section_user_message

if [ "${core_name}" == "HWreboot" ]; then
  _dump_proc_lastlog
fi
if [ "${core_name}" = "OneshotFailure" ]; then
  _section_failed_oneshot_scripts
fi
if [ x"$NO_SECTION_HEADER" = x"true" -a "${omit_core}" != "true" ]; then
cat
elif [ -n "${IS_OOPSLOG}" ]; then
  _print_header oopslog
  cat
elif [ "${omit_core}" != "true" ] && [ "${core_pid}" -gt 0 ]; then
  # By default core is read from stdin.
  originalcorefilename=-
  if [ x"$REDUCE_CORE" = x"true" ] || [ x"$INCLUDE_STACK_TRACE" = x"true" ]; then
    originalcorefilename=${rcorebasename}.core.in.tmp
    cat > ${originalcorefilename}
  fi

  if [ x"$INCLUDE_CORE" = x"true" ]; then
    _print_header coredump
    if [ x"$REDUCE_CORE" = x"true" ]; then
      _reduce_core
    else
      cat "${originalcorefilename}"
    fi
  fi

  if [ x"$INCLUDE_STACK_TRACE" = x"true" ]; then
    _capture_stacktrace
  fi

  if [ -f "${originalcorefilename}" ]; then
    if [ x"$KEEP_UNSTRIPPED_CORE" = x"true" ]; then
      mv "${originalcorefilename}" "${originalcorefilename%.tmp}"
    else
      rm "${originalcorefilename}"
    fi
  fi
fi

_section_ssu_status

if [ "${core_pid}" -gt 0 ]; then
  _section_exe_package
fi

if [ x"$INCLUDE_SYSLOG" = x"true" ]; then
  _dump_logs
fi

if [ x"$INCLUDE_PKGLIST" = x"true" ]; then
  _section_packagelist
  _section_repositories
fi

_section_rich_core_errors
) | lzop > ${rcorebasename}.tmp

mv "${rcorebasename}.tmp" "${rcorefilename}"

# count cores per application
if [ ! -d /var/lib/dsme/rich-cores ]; then
    mkdir -p /var/lib/dsme/rich-cores;
fi
counterfile=/var/lib/dsme/rich-cores/${core_name}
echo $(($(cat $counterfile 2>/dev/null)+1)) > $counterfile

echo "rich-core-dumper" > /sys/power/wake_unlock
